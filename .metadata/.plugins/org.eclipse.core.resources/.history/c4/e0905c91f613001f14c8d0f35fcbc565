package com.kosta.board;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.kosta.sample.json.EmpVO;

public class Board {

	private static final String DB_URL = "jdbc:oracle:thin:@127.0.0.1:1521:XE";
	private static final String DB_ID = "it";
	private static final String DB_PW = "0000";

	// 오라클 연결하는 동작 -> 나한테 뭘줄래? 는 파라미터, 뭘 뱉어낼래?는 return -> 근데 호출하는 입장에서는 반대가 될 수도 있다.
	// 지금은 함수입장이기에..
	public Connection oracleConn() {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try { // class.forName은 예외처리로.
			Class.forName("oracle.jdbc.driver.OracleDriver");
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}

		try {
			conn = DriverManager.getConnection(DB_URL, DB_ID, DB_PW); // getConnection은 static이라 메모리에 올라가져 있어서 마음대로 쓸 수
																		// 있다. getConnection이 Connection을 뱉는데, 이
																		// Connection을 이용하여 sql을 검사하게 된다.
			if (conn != null) {
				System.out.println("connection OK");
			} else {
				System.out.println("connection fail");
			}

			String sql = "SELECT * FROM emp";
			pstmt = conn.prepareStatement(sql); // prepareStatement는 return으로 preparedStatement를 줄 것이다. 즉, pstmt로 주니 받자!

			pstmt.executeQuery(sql); // 얜 리턴으로 resultset. 즉, rs에담자
			rs = pstmt.executeQuery();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				rs.close(); // resultSet은 SELECT만 있다. 보통 resultSet없이 가겠다고 하는건 update나 delete문이다.
				pstmt.close();
				conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			return conn;
		}
	}

	public void oracleClose(Connection conn, PreparedStatment pstmt, rs) {
		try {
			if(rs!=null) {
				rs.close();
			}
			if(pstmt!=null) {
				pstmt.close();
			}
			if(conn!=null) {
				conn.close();
			}
		} catch (SQLException e) {
			
		}
	}

	public ArrayList<EmpVO> boardSelect() { // emp다갖고와야하니까 파라미터는 BoardSelect하면됨

		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		ArrayList<EmpVO> list = new ArrayList<EmpVO>();

		try {
			conn = oracleConn(); // 메서드 호출을 통해 conn받아오기
			String sql = "select * from emp";
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();

			while (rs.next()) {
				EmpVO vo = new EmpVO();
				vo.setEmpno(rs.getInt("empno"));
				vo.setEname(rs.getString("ename"));
				list.add(vo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			oracleClose(conn, pstmt, rs);
		}
		return list;

	}
	
	
	public int boardDelete(int empno) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		int deleteRes = 0; //초기에는 0으로시작했을거고
		Resultset rs = null;
		
		try {
			conn = oracleConn();
			String sql = "delete from emp WHERE empno = " + empno;
			pstmt = conn.prepareStatement(sql);
			deleteRes  = pstmt.executeUpdate();
		} catch(SQLException e) {
			e.printStackTrace();
		} finally {
			oracleClose(conn, pstmt);
		}
		return deleteRes; //몇건지워졌는지 갖다주면됨.
	}
	
	
	
	
	
	
	
	public static void main(String[] args) {
		Board b = new Board();
		//b.oracleConn(); //이렇게부를필요 X
		//Connection conn = b.oracleConn(); //이 conn을 select하고싶다면 -> 지금 커넥션 여는 문장.-> 근데 밖에 꺼내놓으면 이상함 -> 메서드를 추가했을 때, 너무 불편하다.
		ArrayList<EmpVO> list = obj.boardSelect();
		//b.oracleClose(conn, rs, pstmt); rs랑 pstmt는 사용이 여기선 불가능하다..
		
		//우리 커넥션, 셀렉트, 클로스 -> 함수가 3개다.
		System.out.println("총: " + list.size());
		for(int i=0; i<list.size(); i++) {
			int a = list.get(i).getEmpno();
			String b = list.get(i).getEname();
			System.out.println(a + "\t" + b);
		}
	}
	
	
	
	
	
	
	
	
	
}