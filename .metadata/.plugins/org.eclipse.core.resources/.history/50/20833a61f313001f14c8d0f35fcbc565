package com.kosta.board;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.kosta.sample.json.EmpVO;

public class Board {
	
	private static final String DB_URL = "jdbc:oracle:thin:@127.0.0.1:1521:XE"; 
	private static final String DB_ID = "it";
	private static final String DB_PW = "0000";
	
	
	
	//오라클 연결하는 동작 -> 나한테 뭘줄래? 는 파라미터, 뭘 뱉어낼래?는 return -> 근데 호출하는 입장에서는 반대가 될 수도 있다. 지금은 함수입장이기에..
    public Connection oracleConn(){
    	Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		
		try { //class.forName은 예외처리로.
			Class.forName("oracle.jdbc.driver.OracleDriver");
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		
		
		
		try {
			conn = DriverManager.getConnection(DB_URL, DB_ID, DB_PW); //getConnection은 static이라 메모리에 올라가져 있어서 마음대로 쓸 수 있다. getConnection이 Connection을 뱉는데, 이 Connection을 이용하여 sql을 검사하게 된다.
			if(conn != null) {
				System.out.println("connection OK");
			} else {
				System.out.println("connection fail");
			}
			
			String sql = "SELECT * FROM emp";
			pstmt = conn.prepareStatement(sql); //prepareStatement는 return으로 preparedStatement를 줄 것이다. 즉, pstmt로 주니 받자!
	
			pstmt.executeQuery(sql); //얜 리턴으로 resultset. 즉, rs에담자
			rs = pstmt.executeQuery();
			
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				rs.close(); //resultSet은 SELECT만 있다. 보통 resultSet없이 가겠다고 하는건 update나 delete문이다.
				pstmt.close();
				conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
    }
    
    
    public ArrayList<EmpVO> boardSelect(){ //emp다갖고와야하니까 파라미터는 BoardSelect하면됨
    	Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		
		try { //class.forName은 예외처리로.
			Class.forName("oracle.jdbc.driver.OracleDriver");
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		
		
		
		try {
			conn = DriverManager.getConnection(DB_URL, DB_ID, DB_PW); //getConnection은 static이라 메모리에 올라가져 있어서 마음대로 쓸 수 있다. getConnection이 Connection을 뱉는데, 이 Connection을 이용하여 sql을 검사하게 된다.
			if(conn != null) {
				System.out.println("connection OK");
			} else {
				System.out.println("connection fail");
			}
			
			String sql = "SELECT * FROM emp";
			pstmt = conn.prepareStatement(sql); //prepareStatement는 return으로 preparedStatement를 줄 것이다. 즉, pstmt로 주니 받자!
	
			pstmt.executeQuery(sql); //얜 리턴으로 resultset. 즉, rs에담자
			rs = pstmt.executeQuery();
			
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				rs.close(); //resultSet은 SELECT만 있다. 보통 resultSet없이 가겠다고 하는건 update나 delete문이다.
				pstmt.close();
				conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
    }
    
    
    
    
}
